// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  profile   Profile?
  stories   Story[]
  createdAt DateTime  @default(now())
  Comment   Comment[]
  Like      Like[]

  resetOtp  String?
  otpExpiry DateTime?

  isVerified Boolean @default(false)

  followers Follow[] @relation("followers") // users who follow this user (authors' followers)
  following Follow[] @relation("following") // users this user follows
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  bio       String?
  image     String?
  createdAt DateTime @default(now())
}

model Story {
  id          Int           @id @default(autoincrement())
  title       String
  description String // short description
  content     String? // used only for "Other" type
  coverImage  String?
  genre       String? // e.g., Fantasy, Adventure
  audience    AudienceType? // Enum for "general", "teen", "mature"
  type        StoryType     @default(OTHER)
  published   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // ✅ Relations
  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  pages Page[] // Only for books
  tags  StoryTag[] // Many-to-many via join model

  comments Comment[]
  like     Like[]
  views    Int       @default(0) // NEW: simple counter

  // Follow relation 
}

model Page {
  id         Int      @id @default(autoincrement())
  story      Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId    Int
  pageNumber Int
  content    String // Rich text content
  createdAt  DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  story     Story    @relation(fields: [storyId], references: [id])
  storyId   Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([storyId, userId], name: "userId_storyId") // ✅ ensures one like per user per story
}

enum StoryType {
  BOOK
  OTHER // scrollable type
}

// ✅ Normalized Tag model
model Tag {
  id      Int        @id @default(autoincrement())
  name    String     @unique
  stories StoryTag[]
}

// ✅ Join table for many-to-many
model StoryTag {
  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId Int

  tag   Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([storyId, tagId]) // composite primary key
}

model Follow {
  id Int @id @default(autoincrement())

  //  the user who follows 
  follower   User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int

  // the user being followed (author)

  following   User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) // prevents duplicate follows
  @@index([followingId]) // useful when querying an author's followers
  @@index([followerId]) // useful when querying who a user is following
}

// ✅ Enum for audience
enum AudienceType {
  GENERAL
  TEEN
  MATURE
}

// npx prisma migrate dev --name updated-models
