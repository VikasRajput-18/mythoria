// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  profile   Profile?
  stories   Story[]
  createdAt DateTime @default(now())
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  bio       String?
  image     String?
  createdAt DateTime @default(now())
}

model Story {
  id          Int           @id @default(autoincrement())
  title       String
  description String // short description
  content     String? // used only for "Other" type
  coverImage  String?
  genre       String? // e.g., Fantasy, Adventure
  audience    AudienceType? // Enum for "general", "teen", "mature"
  type        StoryType     @default(OTHER)
  published   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // ✅ Relations
  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  pages Page[] // Only for books
  tags  StoryTag[] // Many-to-many via join model
}

model Page {
  id         Int      @id @default(autoincrement())
  story      Story    @relation(fields: [storyId], references: [id])
  storyId    Int
  pageNumber Int
  content    String // Rich text content
  createdAt  DateTime @default(now())
}

enum StoryType {
  BOOK
  OTHER // scrollable type
}

// ✅ Normalized Tag model
model Tag {
  id      Int        @id @default(autoincrement())
  name    String     @unique
  stories StoryTag[]
}

// ✅ Join table for many-to-many
model StoryTag {
  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId Int

  tag   Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([storyId, tagId]) // composite primary key
}

// ✅ Enum for audience
enum AudienceType {
  GENERAL
  TEEN
  MATURE
}

// npx prisma migrate dev --name updated-models
